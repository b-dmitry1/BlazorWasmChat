@page "/"

@using Microsoft.AspNetCore.SignalR.Client
@using BlazorWasmChat.Shared;

@inject AuthenticationStateProvider AuthStateProvider
@inject ILocalStorageService LocalStorage

@inject HttpClient Http
@inject NavigationManager NavigationManager

@implements IAsyncDisposable

<PageTitle>Чат</PageTitle>

<div class="container">

    @* Боковая панель *@
    <div class="sidebar">
        <div style="background-color:whitesmoke;">
            <AuthorizeView>

                @* Если пользователь авторизован, то вывести его имя и кнопку выхода *@
                <Authorized>
                    <label>Ваше имя:
                        <input value="@context?.User?.Identity?.Name" style="width: 280px;" readonly/>
                    </label>
                    <p/><button @onclick="Logout" >Выйти</button>
                </Authorized>

                @* Если пользователь не авторизован, то предложить вход в систему *@
                <NotAuthorized>
                    Пожалуйста, <a href="/login">авторизуйтесь</a>
                </NotAuthorized>
            </AuthorizeView>

            @* Выведем список комнат чата *@
            @if (rooms is not null)
            {
                <p></p><label>Комнаты:
                    <select @bind="@roomId" size="10" style="width: 280px;">
                        @foreach (var room in rooms)
                        {
                            <option>@room.Name</option>
                        }
                    </select>
                </label>
            }
            else
            {
                <p>Загрузка списка комнат, подождите...</p>
            }
        </div>
    </div>

    @* Чат *@
    <div class="main">
        <h2>@(roomId ?? "Выберите комнату")</h2>

        @* Мини-форма для ввода сообщения *@
        <div>
            <form action="javascript:void()">
            
                <label>Сообщение:
                    <br><input @bind="messageText" style="width: 480px;" />
                </label>

                @* Невидимая кнопка, реагирующая на нажатие клавиши Enter *@
                <input type="submit" @onclick="Send" @onkeypress:preventDefault hidden />
            
            </form>
        </div>

        @* Поле для вывода сообщений *@
        <div>
            @foreach (var message in messages
                .Where(x => x.RoomId == roomId)
                .TakeLast(maxMessages))
            {
                <div class="message-time">@message.Issued</div>
                <div class="message-text">@message</div>
            }
        </div>
    </div>

</div>




@code {
    // Максимальное количество сообщений на экране
    private readonly int maxMessages = 10;

    // Подключение SignalR
    private HubConnection? hubConnection;

    // Таймер для обновления списка комнат
    private System.Threading.Timer? timer;

    // Хранилище сообщений и списка комнат
    private List<ChatMessage> messages = new List<ChatMessage>();
    private ChatRoom[]? rooms;

    // Поля формы
    private string? messageText;
    private string? roomId;

    protected override async Task OnInitializedAsync()
    {
        // Получить токен авторизации из локального хранилища
        var token = await LocalStorage.GetItemAsStringAsync("token");

        // Подключиться к концентратору SignalR
        await startHubConnection(token);

        // Запустить таймер, обновляющий список комнат
        // Первое срабатывание через 2 секунды, потом каждые 5 секунд
        var timerLocked = false;
        timer = new System.Threading.Timer(async (object? stateInfo) =>
        {
            // Простейший механизм блокировки повторного входа в процедуру
            if (timerLocked)
            {
                return;
            }
            timerLocked = true;

            // Загрузить список комнат
            try
            {
                rooms = await Http.GetFromJsonAsync<ChatRoom[]>("/api/chatrooms");

                StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }

            timerLocked = false;
        }, null, 2000, 5000);
    }

    private async Task startHubConnection(string? token)
    {
        // Создать подключение SignalR
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"), options =>
            {
                // Добавить токен пользователя
                options.AccessTokenProvider = () => Task.FromResult(token);
            })
            .WithAutomaticReconnect()
            .Build();

        // Добавить обработчик входящего сообщения
        hubConnection.On<ChatMessage>("ReceiveMessage", (message) =>
        {
            messages.Add(message);

            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    // Действие при нажатии кнопки "Отправить"
    private async Task Send()
    {
        // Получить имя пользователя
        var auth = await AuthStateProvider.GetAuthenticationStateAsync();
        var userName = auth?.User?.Identity?.Name;

        // Проверка заполнения полей формы перед отправкой
        if (userName is null || userName.Length == 0)
        {
            return;
        }

        if (messageText is null || messageText.Length == 0)
        {
            return;
        }

        if (roomId is null)
        {
            return;
        }

        // Проверка подключения к hub
        if (hubConnection is null ||
            hubConnection.ConnectionId is null)
        {
            return;
        }

        // Подготовить и отправить новое сообщение
        var message = new ChatMessage
        {
            FromUser = userName,
            RoomId = roomId,
            Text = messageText
        };

        // Очистить поле ввода текста сообщения
        messageText = string.Empty;

        // Вызвать метод SendMessage на сервере
        await hubConnection.SendAsync("SendMessage", message);
    }

    async Task Logout()
    {
        // Удалить токен авторизации из хранилища
        await LocalStorage.RemoveItemAsync("token");

        // Обновить состояние авторизации
        await AuthStateProvider.GetAuthenticationStateAsync();

        // Перезапустить соединение SignalR с пустым токеном
        await hubConnection!.DisposeAsync();
        await startHubConnection("");

        // Перейти на главную страницу
        NavigationManager.NavigateTo("/");
    }

    // Корректное завешение соединения
    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}